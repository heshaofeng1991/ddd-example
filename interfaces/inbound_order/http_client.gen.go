// Package interfaces provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package interfaces

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// InboundOrderBatchQueryInboundOrder request
	InboundOrderBatchQueryInboundOrder(ctx context.Context, params *InboundOrderBatchQueryInboundOrderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InboundOrderCreateInboundOrder request with any body
	InboundOrderCreateInboundOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InboundOrderCreateInboundOrder(ctx context.Context, body InboundOrderCreateInboundOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InboundOrderQueryInboundOrder request with any body
	InboundOrderQueryInboundOrderWithBody(ctx context.Context, orderNumber string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InboundOrderQueryInboundOrder(ctx context.Context, orderNumber string, body InboundOrderQueryInboundOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) InboundOrderBatchQueryInboundOrder(ctx context.Context, params *InboundOrderBatchQueryInboundOrderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInboundOrderBatchQueryInboundOrderRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InboundOrderCreateInboundOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInboundOrderCreateInboundOrderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InboundOrderCreateInboundOrder(ctx context.Context, body InboundOrderCreateInboundOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInboundOrderCreateInboundOrderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InboundOrderQueryInboundOrderWithBody(ctx context.Context, orderNumber string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInboundOrderQueryInboundOrderRequestWithBody(c.Server, orderNumber, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InboundOrderQueryInboundOrder(ctx context.Context, orderNumber string, body InboundOrderQueryInboundOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInboundOrderQueryInboundOrderRequest(c.Server, orderNumber, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewInboundOrderBatchQueryInboundOrderRequest generates requests for InboundOrderBatchQueryInboundOrder
func NewInboundOrderBatchQueryInboundOrderRequest(server string, params *InboundOrderBatchQueryInboundOrderParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.OrderNumbers != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_numbers", runtime.ParamLocationQuery, *params.OrderNumbers); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Current != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "current", runtime.ParamLocationQuery, *params.Current); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInboundOrderCreateInboundOrderRequest calls the generic InboundOrderCreateInboundOrder builder with application/json body
func NewInboundOrderCreateInboundOrderRequest(server string, body InboundOrderCreateInboundOrderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInboundOrderCreateInboundOrderRequestWithBody(server, "application/json", bodyReader)
}

// NewInboundOrderCreateInboundOrderRequestWithBody generates requests for InboundOrderCreateInboundOrder with any type of body
func NewInboundOrderCreateInboundOrderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInboundOrderQueryInboundOrderRequest calls the generic InboundOrderQueryInboundOrder builder with application/json body
func NewInboundOrderQueryInboundOrderRequest(server string, orderNumber string, body InboundOrderQueryInboundOrderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInboundOrderQueryInboundOrderRequestWithBody(server, orderNumber, "application/json", bodyReader)
}

// NewInboundOrderQueryInboundOrderRequestWithBody generates requests for InboundOrderQueryInboundOrder with any type of body
func NewInboundOrderQueryInboundOrderRequestWithBody(server string, orderNumber string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "order_number", runtime.ParamLocationPath, orderNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// InboundOrderBatchQueryInboundOrder request
	InboundOrderBatchQueryInboundOrderWithResponse(ctx context.Context, params *InboundOrderBatchQueryInboundOrderParams, reqEditors ...RequestEditorFn) (*InboundOrderBatchQueryInboundOrderResponse, error)

	// InboundOrderCreateInboundOrder request with any body
	InboundOrderCreateInboundOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InboundOrderCreateInboundOrderResponse, error)

	InboundOrderCreateInboundOrderWithResponse(ctx context.Context, body InboundOrderCreateInboundOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*InboundOrderCreateInboundOrderResponse, error)

	// InboundOrderQueryInboundOrder request with any body
	InboundOrderQueryInboundOrderWithBodyWithResponse(ctx context.Context, orderNumber string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InboundOrderQueryInboundOrderResponse, error)

	InboundOrderQueryInboundOrderWithResponse(ctx context.Context, orderNumber string, body InboundOrderQueryInboundOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*InboundOrderQueryInboundOrderResponse, error)
}

type InboundOrderBatchQueryInboundOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BatchQueryOrderRsp
}

// Status returns HTTPResponse.Status
func (r InboundOrderBatchQueryInboundOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InboundOrderBatchQueryInboundOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InboundOrderCreateInboundOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateInboundRsp
}

// Status returns HTTPResponse.Status
func (r InboundOrderCreateInboundOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InboundOrderCreateInboundOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InboundOrderQueryInboundOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QueryInboundRsp
}

// Status returns HTTPResponse.Status
func (r InboundOrderQueryInboundOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InboundOrderQueryInboundOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// InboundOrderBatchQueryInboundOrderWithResponse request returning *InboundOrderBatchQueryInboundOrderResponse
func (c *ClientWithResponses) InboundOrderBatchQueryInboundOrderWithResponse(ctx context.Context, params *InboundOrderBatchQueryInboundOrderParams, reqEditors ...RequestEditorFn) (*InboundOrderBatchQueryInboundOrderResponse, error) {
	rsp, err := c.InboundOrderBatchQueryInboundOrder(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInboundOrderBatchQueryInboundOrderResponse(rsp)
}

// InboundOrderCreateInboundOrderWithBodyWithResponse request with arbitrary body returning *InboundOrderCreateInboundOrderResponse
func (c *ClientWithResponses) InboundOrderCreateInboundOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InboundOrderCreateInboundOrderResponse, error) {
	rsp, err := c.InboundOrderCreateInboundOrderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInboundOrderCreateInboundOrderResponse(rsp)
}

func (c *ClientWithResponses) InboundOrderCreateInboundOrderWithResponse(ctx context.Context, body InboundOrderCreateInboundOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*InboundOrderCreateInboundOrderResponse, error) {
	rsp, err := c.InboundOrderCreateInboundOrder(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInboundOrderCreateInboundOrderResponse(rsp)
}

// InboundOrderQueryInboundOrderWithBodyWithResponse request with arbitrary body returning *InboundOrderQueryInboundOrderResponse
func (c *ClientWithResponses) InboundOrderQueryInboundOrderWithBodyWithResponse(ctx context.Context, orderNumber string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InboundOrderQueryInboundOrderResponse, error) {
	rsp, err := c.InboundOrderQueryInboundOrderWithBody(ctx, orderNumber, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInboundOrderQueryInboundOrderResponse(rsp)
}

func (c *ClientWithResponses) InboundOrderQueryInboundOrderWithResponse(ctx context.Context, orderNumber string, body InboundOrderQueryInboundOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*InboundOrderQueryInboundOrderResponse, error) {
	rsp, err := c.InboundOrderQueryInboundOrder(ctx, orderNumber, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInboundOrderQueryInboundOrderResponse(rsp)
}

// ParseInboundOrderBatchQueryInboundOrderResponse parses an HTTP response from a InboundOrderBatchQueryInboundOrderWithResponse call
func ParseInboundOrderBatchQueryInboundOrderResponse(rsp *http.Response) (*InboundOrderBatchQueryInboundOrderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InboundOrderBatchQueryInboundOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BatchQueryOrderRsp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInboundOrderCreateInboundOrderResponse parses an HTTP response from a InboundOrderCreateInboundOrderWithResponse call
func ParseInboundOrderCreateInboundOrderResponse(rsp *http.Response) (*InboundOrderCreateInboundOrderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InboundOrderCreateInboundOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateInboundRsp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseInboundOrderQueryInboundOrderResponse parses an HTTP response from a InboundOrderQueryInboundOrderWithResponse call
func ParseInboundOrderQueryInboundOrderResponse(rsp *http.Response) (*InboundOrderQueryInboundOrderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InboundOrderQueryInboundOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QueryInboundRsp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
