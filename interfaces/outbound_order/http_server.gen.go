// Package interfaces provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package interfaces

import (
	"context"
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// create_outbound_order_item order
	// (POST /oms/v1/outbound-order-items)
	OrderCreateOutboundOrderItem(w http.ResponseWriter, r *http.Request)
	// delete_outbound_order_item order
	// (DELETE /oms/v1/outbound-order-items/{id})
	OrderDeleteOutboundOrderItem(w http.ResponseWriter, r *http.Request, id int64)
	// update_outbound_order_item order
	// (PUT /oms/v1/outbound-order-items/{id})
	OrderUpdateOutboundOrderItem(w http.ResponseWriter, r *http.Request, id int64)
	// delete_outbound_order order
	// (DELETE /oms/v1/outbound-orders)
	OrderDeleteOutboundOrder(w http.ResponseWriter, r *http.Request)
	// batch_query_outbound_order order
	// (GET /oms/v1/outbound-orders)
	OrderBatchQueryOutboundOrder1(w http.ResponseWriter, r *http.Request, params OrderBatchQueryOutboundOrder1Params)
	// create_oms_outbound_order order
	// (POST /oms/v1/outbound-orders)
	OrderCreateOmsOutboundOrder(w http.ResponseWriter, r *http.Request)
	// batch_oms_update_outbound_order order
	// (PUT /oms/v1/outbound-orders)
	OrderBatchOmsUpdateOutboundOrder(w http.ResponseWriter, r *http.Request)
	// back_to_ready_outbound_order order
	// (PUT /oms/v1/outbound-orders/back-to-ready)
	OrderBackToReadyOutboundOrder(w http.ResponseWriter, r *http.Request)
	// cancel_outbound_order order
	// (PUT /oms/v1/outbound-orders/cancel)
	OrderCancelOutboundOrder(w http.ResponseWriter, r *http.Request)
	// get_outbound_order_count order
	// (GET /oms/v1/outbound-orders/counts)
	OrderGetOutboundOrderCount(w http.ResponseWriter, r *http.Request, params OrderGetOutboundOrderCountParams)
	// export_outbound_orders order
	// (GET /oms/v1/outbound-orders/export)
	OrderExportOutboundOrders(w http.ResponseWriter, r *http.Request, params OrderExportOutboundOrdersParams)
	// get_outbound_order_list_filters order
	// (GET /oms/v1/outbound-orders/filters)
	OrderGetOutboundOrderListFilters(w http.ResponseWriter, r *http.Request)
	// get_outbound_order_list order
	// (GET /oms/v1/outbound-orders/list)
	OrderGetOutboundOrderList(w http.ResponseWriter, r *http.Request, params OrderGetOutboundOrderListParams)
	// resubmit_outbound_order order
	// (PUT /oms/v1/outbound-orders/re-submit)
	OrderResubmitOutboundOrder(w http.ResponseWriter, r *http.Request)
	// shipping_outbound_order order
	// (PUT /oms/v1/outbound-orders/ship)
	OrderShippingOutboundOrder(w http.ResponseWriter, r *http.Request)
	// upload_outbound_orders order
	// (POST /oms/v1/outbound-orders/upload)
	OrderUploadOutboundOrders(w http.ResponseWriter, r *http.Request)
	// get_outbound_order order
	// (GET /oms/v1/outbound-orders/{order_number})
	OrderGetOutboundOrder1(w http.ResponseWriter, r *http.Request, orderNumber string)
	// oms_update_outbound_order order
	// (PUT /oms/v1/outbound-orders/{order_number})
	OrderOmsUpdateOutboundOrder(w http.ResponseWriter, r *http.Request, orderNumber string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// OrderCreateOutboundOrderItem operation middleware
func (siw *ServerInterfaceWrapper) OrderCreateOutboundOrderItem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Jwt_header_AuthorizationScopes, []string{"api:read", "api:write"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OrderCreateOutboundOrderItem(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// OrderDeleteOutboundOrderItem operation middleware
func (siw *ServerInterfaceWrapper) OrderDeleteOutboundOrderItem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Jwt_header_AuthorizationScopes, []string{"api:read", "api:write"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OrderDeleteOutboundOrderItem(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// OrderUpdateOutboundOrderItem operation middleware
func (siw *ServerInterfaceWrapper) OrderUpdateOutboundOrderItem(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Jwt_header_AuthorizationScopes, []string{"api:read", "api:write"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OrderUpdateOutboundOrderItem(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// OrderDeleteOutboundOrder operation middleware
func (siw *ServerInterfaceWrapper) OrderDeleteOutboundOrder(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Jwt_header_AuthorizationScopes, []string{"api:read", "api:write"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OrderDeleteOutboundOrder(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// OrderBatchQueryOutboundOrder1 operation middleware
func (siw *ServerInterfaceWrapper) OrderBatchQueryOutboundOrder1(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Jwt_header_AuthorizationScopes, []string{"api:read", "api:write"})

	// Parameter object where we will unmarshal all parameters from the context
	var params OrderBatchQueryOutboundOrder1Params

	// ------------- Optional query parameter "order_numbers" -------------
	if paramValue := r.URL.Query().Get("order_numbers"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "order_numbers", r.URL.Query(), &params.OrderNumbers)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order_numbers", Err: err})
		return
	}

	// ------------- Optional query parameter "status" -------------
	if paramValue := r.URL.Query().Get("status"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "current" -------------
	if paramValue := r.URL.Query().Get("current"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "current", r.URL.Query(), &params.Current)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "current", Err: err})
		return
	}

	// ------------- Optional query parameter "page_size" -------------
	if paramValue := r.URL.Query().Get("page_size"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "page_size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page_size", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OrderBatchQueryOutboundOrder1(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// OrderCreateOmsOutboundOrder operation middleware
func (siw *ServerInterfaceWrapper) OrderCreateOmsOutboundOrder(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Jwt_header_AuthorizationScopes, []string{"api:read", "api:write"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OrderCreateOmsOutboundOrder(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// OrderBatchOmsUpdateOutboundOrder operation middleware
func (siw *ServerInterfaceWrapper) OrderBatchOmsUpdateOutboundOrder(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Jwt_header_AuthorizationScopes, []string{"api:read", "api:write"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OrderBatchOmsUpdateOutboundOrder(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// OrderBackToReadyOutboundOrder operation middleware
func (siw *ServerInterfaceWrapper) OrderBackToReadyOutboundOrder(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Jwt_header_AuthorizationScopes, []string{"api:read", "api:write"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OrderBackToReadyOutboundOrder(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// OrderCancelOutboundOrder operation middleware
func (siw *ServerInterfaceWrapper) OrderCancelOutboundOrder(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Jwt_header_AuthorizationScopes, []string{"api:read", "api:write"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OrderCancelOutboundOrder(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// OrderGetOutboundOrderCount operation middleware
func (siw *ServerInterfaceWrapper) OrderGetOutboundOrderCount(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Jwt_header_AuthorizationScopes, []string{"api:read", "api:write"})

	// Parameter object where we will unmarshal all parameters from the context
	var params OrderGetOutboundOrderCountParams

	// ------------- Optional query parameter "order_number" -------------
	if paramValue := r.URL.Query().Get("order_number"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "order_number", r.URL.Query(), &params.OrderNumber)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order_number", Err: err})
		return
	}

	// ------------- Optional query parameter "platform_order_no" -------------
	if paramValue := r.URL.Query().Get("platform_order_no"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "platform_order_no", r.URL.Query(), &params.PlatformOrderNo)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "platform_order_no", Err: err})
		return
	}

	// ------------- Optional query parameter "listing_sku" -------------
	if paramValue := r.URL.Query().Get("listing_sku"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "listing_sku", r.URL.Query(), &params.ListingSku)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "listing_sku", Err: err})
		return
	}

	// ------------- Optional query parameter "sku" -------------
	if paramValue := r.URL.Query().Get("sku"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sku", r.URL.Query(), &params.Sku)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sku", Err: err})
		return
	}

	// ------------- Optional query parameter "nss_tracking_number" -------------
	if paramValue := r.URL.Query().Get("nss_tracking_number"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "nss_tracking_number", r.URL.Query(), &params.NssTrackingNumber)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nss_tracking_number", Err: err})
		return
	}

	// ------------- Optional query parameter "shipping_name" -------------
	if paramValue := r.URL.Query().Get("shipping_name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "shipping_name", r.URL.Query(), &params.ShippingName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "shipping_name", Err: err})
		return
	}

	// ------------- Optional query parameter "platform" -------------
	if paramValue := r.URL.Query().Get("platform"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "platform", r.URL.Query(), &params.Platform)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "platform", Err: err})
		return
	}

	// ------------- Optional query parameter "status_label" -------------
	if paramValue := r.URL.Query().Get("status_label"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "status_label", r.URL.Query(), &params.StatusLabel)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status_label", Err: err})
		return
	}

	// ------------- Optional query parameter "store_id" -------------
	if paramValue := r.URL.Query().Get("store_id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "store_id", r.URL.Query(), &params.StoreId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "store_id", Err: err})
		return
	}

	// ------------- Optional query parameter "warehouse_id" -------------
	if paramValue := r.URL.Query().Get("warehouse_id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "warehouse_id", r.URL.Query(), &params.WarehouseId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "warehouse_id", Err: err})
		return
	}

	// ------------- Optional query parameter "country_code" -------------
	if paramValue := r.URL.Query().Get("country_code"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "country_code", r.URL.Query(), &params.CountryCode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "country_code", Err: err})
		return
	}

	// ------------- Optional query parameter "created_at_start" -------------
	if paramValue := r.URL.Query().Get("created_at_start"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "created_at_start", r.URL.Query(), &params.CreatedAtStart)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "created_at_start", Err: err})
		return
	}

	// ------------- Optional query parameter "created_at_end" -------------
	if paramValue := r.URL.Query().Get("created_at_end"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "created_at_end", r.URL.Query(), &params.CreatedAtEnd)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "created_at_end", Err: err})
		return
	}

	// ------------- Optional query parameter "ship_date_start" -------------
	if paramValue := r.URL.Query().Get("ship_date_start"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "ship_date_start", r.URL.Query(), &params.ShipDateStart)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ship_date_start", Err: err})
		return
	}

	// ------------- Optional query parameter "ship_date_end" -------------
	if paramValue := r.URL.Query().Get("ship_date_end"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "ship_date_end", r.URL.Query(), &params.ShipDateEnd)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ship_date_end", Err: err})
		return
	}

	// ------------- Optional query parameter "offline_order" -------------
	if paramValue := r.URL.Query().Get("offline_order"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offline_order", r.URL.Query(), &params.OfflineOrder)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offline_order", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------
	if paramValue := r.URL.Query().Get("page"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "page_size" -------------
	if paramValue := r.URL.Query().Get("page_size"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "page_size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page_size", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OrderGetOutboundOrderCount(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// OrderExportOutboundOrders operation middleware
func (siw *ServerInterfaceWrapper) OrderExportOutboundOrders(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Jwt_header_AuthorizationScopes, []string{"api:read", "api:write"})

	// Parameter object where we will unmarshal all parameters from the context
	var params OrderExportOutboundOrdersParams

	// ------------- Optional query parameter "order_number" -------------
	if paramValue := r.URL.Query().Get("order_number"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "order_number", r.URL.Query(), &params.OrderNumber)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order_number", Err: err})
		return
	}

	// ------------- Optional query parameter "platform_order_no" -------------
	if paramValue := r.URL.Query().Get("platform_order_no"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "platform_order_no", r.URL.Query(), &params.PlatformOrderNo)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "platform_order_no", Err: err})
		return
	}

	// ------------- Optional query parameter "listing_sku" -------------
	if paramValue := r.URL.Query().Get("listing_sku"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "listing_sku", r.URL.Query(), &params.ListingSku)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "listing_sku", Err: err})
		return
	}

	// ------------- Optional query parameter "sku" -------------
	if paramValue := r.URL.Query().Get("sku"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sku", r.URL.Query(), &params.Sku)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sku", Err: err})
		return
	}

	// ------------- Optional query parameter "nss_tracking_number" -------------
	if paramValue := r.URL.Query().Get("nss_tracking_number"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "nss_tracking_number", r.URL.Query(), &params.NssTrackingNumber)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nss_tracking_number", Err: err})
		return
	}

	// ------------- Optional query parameter "shipping_name" -------------
	if paramValue := r.URL.Query().Get("shipping_name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "shipping_name", r.URL.Query(), &params.ShippingName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "shipping_name", Err: err})
		return
	}

	// ------------- Optional query parameter "platform" -------------
	if paramValue := r.URL.Query().Get("platform"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "platform", r.URL.Query(), &params.Platform)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "platform", Err: err})
		return
	}

	// ------------- Optional query parameter "status_label" -------------
	if paramValue := r.URL.Query().Get("status_label"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "status_label", r.URL.Query(), &params.StatusLabel)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status_label", Err: err})
		return
	}

	// ------------- Optional query parameter "store_id" -------------
	if paramValue := r.URL.Query().Get("store_id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "store_id", r.URL.Query(), &params.StoreId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "store_id", Err: err})
		return
	}

	// ------------- Optional query parameter "warehouse_id" -------------
	if paramValue := r.URL.Query().Get("warehouse_id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "warehouse_id", r.URL.Query(), &params.WarehouseId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "warehouse_id", Err: err})
		return
	}

	// ------------- Optional query parameter "country_code" -------------
	if paramValue := r.URL.Query().Get("country_code"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "country_code", r.URL.Query(), &params.CountryCode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "country_code", Err: err})
		return
	}

	// ------------- Optional query parameter "created_at_start" -------------
	if paramValue := r.URL.Query().Get("created_at_start"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "created_at_start", r.URL.Query(), &params.CreatedAtStart)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "created_at_start", Err: err})
		return
	}

	// ------------- Optional query parameter "created_at_end" -------------
	if paramValue := r.URL.Query().Get("created_at_end"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "created_at_end", r.URL.Query(), &params.CreatedAtEnd)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "created_at_end", Err: err})
		return
	}

	// ------------- Optional query parameter "ship_date_start" -------------
	if paramValue := r.URL.Query().Get("ship_date_start"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "ship_date_start", r.URL.Query(), &params.ShipDateStart)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ship_date_start", Err: err})
		return
	}

	// ------------- Optional query parameter "ship_date_end" -------------
	if paramValue := r.URL.Query().Get("ship_date_end"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "ship_date_end", r.URL.Query(), &params.ShipDateEnd)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ship_date_end", Err: err})
		return
	}

	// ------------- Optional query parameter "offline_order" -------------
	if paramValue := r.URL.Query().Get("offline_order"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offline_order", r.URL.Query(), &params.OfflineOrder)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offline_order", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------
	if paramValue := r.URL.Query().Get("page"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "page_size" -------------
	if paramValue := r.URL.Query().Get("page_size"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "page_size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page_size", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OrderExportOutboundOrders(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// OrderGetOutboundOrderListFilters operation middleware
func (siw *ServerInterfaceWrapper) OrderGetOutboundOrderListFilters(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Jwt_header_AuthorizationScopes, []string{"api:read", "api:write"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OrderGetOutboundOrderListFilters(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// OrderGetOutboundOrderList operation middleware
func (siw *ServerInterfaceWrapper) OrderGetOutboundOrderList(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Jwt_header_AuthorizationScopes, []string{"api:read", "api:write"})

	// Parameter object where we will unmarshal all parameters from the context
	var params OrderGetOutboundOrderListParams

	// ------------- Optional query parameter "order_number" -------------
	if paramValue := r.URL.Query().Get("order_number"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "order_number", r.URL.Query(), &params.OrderNumber)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order_number", Err: err})
		return
	}

	// ------------- Optional query parameter "platform_order_no" -------------
	if paramValue := r.URL.Query().Get("platform_order_no"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "platform_order_no", r.URL.Query(), &params.PlatformOrderNo)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "platform_order_no", Err: err})
		return
	}

	// ------------- Optional query parameter "listing_sku" -------------
	if paramValue := r.URL.Query().Get("listing_sku"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "listing_sku", r.URL.Query(), &params.ListingSku)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "listing_sku", Err: err})
		return
	}

	// ------------- Optional query parameter "sku" -------------
	if paramValue := r.URL.Query().Get("sku"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "sku", r.URL.Query(), &params.Sku)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sku", Err: err})
		return
	}

	// ------------- Optional query parameter "nss_tracking_number" -------------
	if paramValue := r.URL.Query().Get("nss_tracking_number"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "nss_tracking_number", r.URL.Query(), &params.NssTrackingNumber)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nss_tracking_number", Err: err})
		return
	}

	// ------------- Optional query parameter "shipping_name" -------------
	if paramValue := r.URL.Query().Get("shipping_name"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "shipping_name", r.URL.Query(), &params.ShippingName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "shipping_name", Err: err})
		return
	}

	// ------------- Optional query parameter "platform" -------------
	if paramValue := r.URL.Query().Get("platform"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "platform", r.URL.Query(), &params.Platform)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "platform", Err: err})
		return
	}

	// ------------- Optional query parameter "status_label" -------------
	if paramValue := r.URL.Query().Get("status_label"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "status_label", r.URL.Query(), &params.StatusLabel)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status_label", Err: err})
		return
	}

	// ------------- Optional query parameter "store_id" -------------
	if paramValue := r.URL.Query().Get("store_id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "store_id", r.URL.Query(), &params.StoreId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "store_id", Err: err})
		return
	}

	// ------------- Optional query parameter "warehouse_id" -------------
	if paramValue := r.URL.Query().Get("warehouse_id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "warehouse_id", r.URL.Query(), &params.WarehouseId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "warehouse_id", Err: err})
		return
	}

	// ------------- Optional query parameter "country_code" -------------
	if paramValue := r.URL.Query().Get("country_code"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "country_code", r.URL.Query(), &params.CountryCode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "country_code", Err: err})
		return
	}

	// ------------- Optional query parameter "created_at_start" -------------
	if paramValue := r.URL.Query().Get("created_at_start"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "created_at_start", r.URL.Query(), &params.CreatedAtStart)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "created_at_start", Err: err})
		return
	}

	// ------------- Optional query parameter "created_at_end" -------------
	if paramValue := r.URL.Query().Get("created_at_end"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "created_at_end", r.URL.Query(), &params.CreatedAtEnd)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "created_at_end", Err: err})
		return
	}

	// ------------- Optional query parameter "ship_date_start" -------------
	if paramValue := r.URL.Query().Get("ship_date_start"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "ship_date_start", r.URL.Query(), &params.ShipDateStart)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ship_date_start", Err: err})
		return
	}

	// ------------- Optional query parameter "ship_date_end" -------------
	if paramValue := r.URL.Query().Get("ship_date_end"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "ship_date_end", r.URL.Query(), &params.ShipDateEnd)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ship_date_end", Err: err})
		return
	}

	// ------------- Optional query parameter "offline_order" -------------
	if paramValue := r.URL.Query().Get("offline_order"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offline_order", r.URL.Query(), &params.OfflineOrder)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offline_order", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------
	if paramValue := r.URL.Query().Get("page"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "page_size" -------------
	if paramValue := r.URL.Query().Get("page_size"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "page_size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page_size", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OrderGetOutboundOrderList(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// OrderResubmitOutboundOrder operation middleware
func (siw *ServerInterfaceWrapper) OrderResubmitOutboundOrder(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Jwt_header_AuthorizationScopes, []string{"api:read", "api:write"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OrderResubmitOutboundOrder(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// OrderShippingOutboundOrder operation middleware
func (siw *ServerInterfaceWrapper) OrderShippingOutboundOrder(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Jwt_header_AuthorizationScopes, []string{"api:read", "api:write"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OrderShippingOutboundOrder(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// OrderUploadOutboundOrders operation middleware
func (siw *ServerInterfaceWrapper) OrderUploadOutboundOrders(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Jwt_header_AuthorizationScopes, []string{"api:read", "api:write"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OrderUploadOutboundOrders(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// OrderGetOutboundOrder1 operation middleware
func (siw *ServerInterfaceWrapper) OrderGetOutboundOrder1(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "order_number" -------------
	var orderNumber string

	err = runtime.BindStyledParameter("simple", false, "order_number", chi.URLParam(r, "order_number"), &orderNumber)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order_number", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Jwt_header_AuthorizationScopes, []string{"api:read", "api:write"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OrderGetOutboundOrder1(w, r, orderNumber)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// OrderOmsUpdateOutboundOrder operation middleware
func (siw *ServerInterfaceWrapper) OrderOmsUpdateOutboundOrder(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "order_number" -------------
	var orderNumber string

	err = runtime.BindStyledParameter("simple", false, "order_number", chi.URLParam(r, "order_number"), &orderNumber)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order_number", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Jwt_header_AuthorizationScopes, []string{"api:read", "api:write"})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OrderOmsUpdateOutboundOrder(w, r, orderNumber)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/oms/v1/outbound-order-items", wrapper.OrderCreateOutboundOrderItem)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/oms/v1/outbound-order-items/{id}", wrapper.OrderDeleteOutboundOrderItem)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/oms/v1/outbound-order-items/{id}", wrapper.OrderUpdateOutboundOrderItem)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/oms/v1/outbound-orders", wrapper.OrderDeleteOutboundOrder)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/oms/v1/outbound-orders", wrapper.OrderBatchQueryOutboundOrder1)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/oms/v1/outbound-orders", wrapper.OrderCreateOmsOutboundOrder)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/oms/v1/outbound-orders", wrapper.OrderBatchOmsUpdateOutboundOrder)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/oms/v1/outbound-orders/back-to-ready", wrapper.OrderBackToReadyOutboundOrder)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/oms/v1/outbound-orders/cancel", wrapper.OrderCancelOutboundOrder)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/oms/v1/outbound-orders/counts", wrapper.OrderGetOutboundOrderCount)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/oms/v1/outbound-orders/export", wrapper.OrderExportOutboundOrders)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/oms/v1/outbound-orders/filters", wrapper.OrderGetOutboundOrderListFilters)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/oms/v1/outbound-orders/list", wrapper.OrderGetOutboundOrderList)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/oms/v1/outbound-orders/re-submit", wrapper.OrderResubmitOutboundOrder)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/oms/v1/outbound-orders/ship", wrapper.OrderShippingOutboundOrder)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/oms/v1/outbound-orders/upload", wrapper.OrderUploadOutboundOrders)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/oms/v1/outbound-orders/{order_number}", wrapper.OrderGetOutboundOrder1)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/oms/v1/outbound-orders/{order_number}", wrapper.OrderOmsUpdateOutboundOrder)
	})

	return r
}
