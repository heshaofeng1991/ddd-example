// Package interfaces provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package interfaces

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// OrderCreateOutboundOrderItem request with any body
	OrderCreateOutboundOrderItemWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OrderCreateOutboundOrderItem(ctx context.Context, body OrderCreateOutboundOrderItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrderDeleteOutboundOrderItem request
	OrderDeleteOutboundOrderItem(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrderUpdateOutboundOrderItem request with any body
	OrderUpdateOutboundOrderItemWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OrderUpdateOutboundOrderItem(ctx context.Context, id int64, body OrderUpdateOutboundOrderItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrderDeleteOutboundOrder request with any body
	OrderDeleteOutboundOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OrderDeleteOutboundOrder(ctx context.Context, body OrderDeleteOutboundOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrderBatchQueryOutboundOrder1 request
	OrderBatchQueryOutboundOrder1(ctx context.Context, params *OrderBatchQueryOutboundOrder1Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrderCreateOmsOutboundOrder request with any body
	OrderCreateOmsOutboundOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OrderCreateOmsOutboundOrder(ctx context.Context, body OrderCreateOmsOutboundOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrderBatchOmsUpdateOutboundOrder request with any body
	OrderBatchOmsUpdateOutboundOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OrderBatchOmsUpdateOutboundOrder(ctx context.Context, body OrderBatchOmsUpdateOutboundOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrderBackToReadyOutboundOrder request with any body
	OrderBackToReadyOutboundOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OrderBackToReadyOutboundOrder(ctx context.Context, body OrderBackToReadyOutboundOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrderCancelOutboundOrder request with any body
	OrderCancelOutboundOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OrderCancelOutboundOrder(ctx context.Context, body OrderCancelOutboundOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrderGetOutboundOrderCount request
	OrderGetOutboundOrderCount(ctx context.Context, params *OrderGetOutboundOrderCountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrderExportOutboundOrders request
	OrderExportOutboundOrders(ctx context.Context, params *OrderExportOutboundOrdersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrderGetOutboundOrderListFilters request
	OrderGetOutboundOrderListFilters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrderGetOutboundOrderList request
	OrderGetOutboundOrderList(ctx context.Context, params *OrderGetOutboundOrderListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrderResubmitOutboundOrder request with any body
	OrderResubmitOutboundOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OrderResubmitOutboundOrder(ctx context.Context, body OrderResubmitOutboundOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrderShippingOutboundOrder request with any body
	OrderShippingOutboundOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OrderShippingOutboundOrder(ctx context.Context, body OrderShippingOutboundOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrderUploadOutboundOrders request with any body
	OrderUploadOutboundOrdersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrderGetOutboundOrder1 request
	OrderGetOutboundOrder1(ctx context.Context, orderNumber string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OrderOmsUpdateOutboundOrder request with any body
	OrderOmsUpdateOutboundOrderWithBody(ctx context.Context, orderNumber string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	OrderOmsUpdateOutboundOrder(ctx context.Context, orderNumber string, body OrderOmsUpdateOutboundOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) OrderCreateOutboundOrderItemWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrderCreateOutboundOrderItemRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrderCreateOutboundOrderItem(ctx context.Context, body OrderCreateOutboundOrderItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrderCreateOutboundOrderItemRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrderDeleteOutboundOrderItem(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrderDeleteOutboundOrderItemRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrderUpdateOutboundOrderItemWithBody(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrderUpdateOutboundOrderItemRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrderUpdateOutboundOrderItem(ctx context.Context, id int64, body OrderUpdateOutboundOrderItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrderUpdateOutboundOrderItemRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrderDeleteOutboundOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrderDeleteOutboundOrderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrderDeleteOutboundOrder(ctx context.Context, body OrderDeleteOutboundOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrderDeleteOutboundOrderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrderBatchQueryOutboundOrder1(ctx context.Context, params *OrderBatchQueryOutboundOrder1Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrderBatchQueryOutboundOrder1Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrderCreateOmsOutboundOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrderCreateOmsOutboundOrderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrderCreateOmsOutboundOrder(ctx context.Context, body OrderCreateOmsOutboundOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrderCreateOmsOutboundOrderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrderBatchOmsUpdateOutboundOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrderBatchOmsUpdateOutboundOrderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrderBatchOmsUpdateOutboundOrder(ctx context.Context, body OrderBatchOmsUpdateOutboundOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrderBatchOmsUpdateOutboundOrderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrderBackToReadyOutboundOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrderBackToReadyOutboundOrderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrderBackToReadyOutboundOrder(ctx context.Context, body OrderBackToReadyOutboundOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrderBackToReadyOutboundOrderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrderCancelOutboundOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrderCancelOutboundOrderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrderCancelOutboundOrder(ctx context.Context, body OrderCancelOutboundOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrderCancelOutboundOrderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrderGetOutboundOrderCount(ctx context.Context, params *OrderGetOutboundOrderCountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrderGetOutboundOrderCountRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrderExportOutboundOrders(ctx context.Context, params *OrderExportOutboundOrdersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrderExportOutboundOrdersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrderGetOutboundOrderListFilters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrderGetOutboundOrderListFiltersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrderGetOutboundOrderList(ctx context.Context, params *OrderGetOutboundOrderListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrderGetOutboundOrderListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrderResubmitOutboundOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrderResubmitOutboundOrderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrderResubmitOutboundOrder(ctx context.Context, body OrderResubmitOutboundOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrderResubmitOutboundOrderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrderShippingOutboundOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrderShippingOutboundOrderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrderShippingOutboundOrder(ctx context.Context, body OrderShippingOutboundOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrderShippingOutboundOrderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrderUploadOutboundOrdersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrderUploadOutboundOrdersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrderGetOutboundOrder1(ctx context.Context, orderNumber string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrderGetOutboundOrder1Request(c.Server, orderNumber)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrderOmsUpdateOutboundOrderWithBody(ctx context.Context, orderNumber string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrderOmsUpdateOutboundOrderRequestWithBody(c.Server, orderNumber, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OrderOmsUpdateOutboundOrder(ctx context.Context, orderNumber string, body OrderOmsUpdateOutboundOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOrderOmsUpdateOutboundOrderRequest(c.Server, orderNumber, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewOrderCreateOutboundOrderItemRequest calls the generic OrderCreateOutboundOrderItem builder with application/json body
func NewOrderCreateOutboundOrderItemRequest(server string, body OrderCreateOutboundOrderItemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOrderCreateOutboundOrderItemRequestWithBody(server, "application/json", bodyReader)
}

// NewOrderCreateOutboundOrderItemRequestWithBody generates requests for OrderCreateOutboundOrderItem with any type of body
func NewOrderCreateOutboundOrderItemRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oms/v1/outbound-order-items")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOrderDeleteOutboundOrderItemRequest generates requests for OrderDeleteOutboundOrderItem
func NewOrderDeleteOutboundOrderItemRequest(server string, id int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oms/v1/outbound-order-items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrderUpdateOutboundOrderItemRequest calls the generic OrderUpdateOutboundOrderItem builder with application/json body
func NewOrderUpdateOutboundOrderItemRequest(server string, id int64, body OrderUpdateOutboundOrderItemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOrderUpdateOutboundOrderItemRequestWithBody(server, id, "application/json", bodyReader)
}

// NewOrderUpdateOutboundOrderItemRequestWithBody generates requests for OrderUpdateOutboundOrderItem with any type of body
func NewOrderUpdateOutboundOrderItemRequestWithBody(server string, id int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oms/v1/outbound-order-items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOrderDeleteOutboundOrderRequest calls the generic OrderDeleteOutboundOrder builder with application/json body
func NewOrderDeleteOutboundOrderRequest(server string, body OrderDeleteOutboundOrderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOrderDeleteOutboundOrderRequestWithBody(server, "application/json", bodyReader)
}

// NewOrderDeleteOutboundOrderRequestWithBody generates requests for OrderDeleteOutboundOrder with any type of body
func NewOrderDeleteOutboundOrderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oms/v1/outbound-orders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOrderBatchQueryOutboundOrder1Request generates requests for OrderBatchQueryOutboundOrder1
func NewOrderBatchQueryOutboundOrder1Request(server string, params *OrderBatchQueryOutboundOrder1Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oms/v1/outbound-orders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.OrderNumbers != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_numbers", runtime.ParamLocationQuery, *params.OrderNumbers); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Current != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "current", runtime.ParamLocationQuery, *params.Current); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrderCreateOmsOutboundOrderRequest calls the generic OrderCreateOmsOutboundOrder builder with application/json body
func NewOrderCreateOmsOutboundOrderRequest(server string, body OrderCreateOmsOutboundOrderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOrderCreateOmsOutboundOrderRequestWithBody(server, "application/json", bodyReader)
}

// NewOrderCreateOmsOutboundOrderRequestWithBody generates requests for OrderCreateOmsOutboundOrder with any type of body
func NewOrderCreateOmsOutboundOrderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oms/v1/outbound-orders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOrderBatchOmsUpdateOutboundOrderRequest calls the generic OrderBatchOmsUpdateOutboundOrder builder with application/json body
func NewOrderBatchOmsUpdateOutboundOrderRequest(server string, body OrderBatchOmsUpdateOutboundOrderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOrderBatchOmsUpdateOutboundOrderRequestWithBody(server, "application/json", bodyReader)
}

// NewOrderBatchOmsUpdateOutboundOrderRequestWithBody generates requests for OrderBatchOmsUpdateOutboundOrder with any type of body
func NewOrderBatchOmsUpdateOutboundOrderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oms/v1/outbound-orders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOrderBackToReadyOutboundOrderRequest calls the generic OrderBackToReadyOutboundOrder builder with application/json body
func NewOrderBackToReadyOutboundOrderRequest(server string, body OrderBackToReadyOutboundOrderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOrderBackToReadyOutboundOrderRequestWithBody(server, "application/json", bodyReader)
}

// NewOrderBackToReadyOutboundOrderRequestWithBody generates requests for OrderBackToReadyOutboundOrder with any type of body
func NewOrderBackToReadyOutboundOrderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oms/v1/outbound-orders/back-to-ready")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOrderCancelOutboundOrderRequest calls the generic OrderCancelOutboundOrder builder with application/json body
func NewOrderCancelOutboundOrderRequest(server string, body OrderCancelOutboundOrderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOrderCancelOutboundOrderRequestWithBody(server, "application/json", bodyReader)
}

// NewOrderCancelOutboundOrderRequestWithBody generates requests for OrderCancelOutboundOrder with any type of body
func NewOrderCancelOutboundOrderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oms/v1/outbound-orders/cancel")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOrderGetOutboundOrderCountRequest generates requests for OrderGetOutboundOrderCount
func NewOrderGetOutboundOrderCountRequest(server string, params *OrderGetOutboundOrderCountParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oms/v1/outbound-orders/counts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.OrderNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_number", runtime.ParamLocationQuery, *params.OrderNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PlatformOrderNo != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "platform_order_no", runtime.ParamLocationQuery, *params.PlatformOrderNo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ListingSku != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "listing_sku", runtime.ParamLocationQuery, *params.ListingSku); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sku != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sku", runtime.ParamLocationQuery, *params.Sku); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NssTrackingNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nss_tracking_number", runtime.ParamLocationQuery, *params.NssTrackingNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ShippingName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "shipping_name", runtime.ParamLocationQuery, *params.ShippingName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Platform != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "platform", runtime.ParamLocationQuery, *params.Platform); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StatusLabel != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status_label", runtime.ParamLocationQuery, *params.StatusLabel); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StoreId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "store_id", runtime.ParamLocationQuery, *params.StoreId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WarehouseId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "warehouse_id", runtime.ParamLocationQuery, *params.WarehouseId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CountryCode != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "country_code", runtime.ParamLocationQuery, *params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreatedAtStart != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at_start", runtime.ParamLocationQuery, *params.CreatedAtStart); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreatedAtEnd != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at_end", runtime.ParamLocationQuery, *params.CreatedAtEnd); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ShipDateStart != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ship_date_start", runtime.ParamLocationQuery, *params.ShipDateStart); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ShipDateEnd != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ship_date_end", runtime.ParamLocationQuery, *params.ShipDateEnd); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OfflineOrder != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offline_order", runtime.ParamLocationQuery, *params.OfflineOrder); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrderExportOutboundOrdersRequest generates requests for OrderExportOutboundOrders
func NewOrderExportOutboundOrdersRequest(server string, params *OrderExportOutboundOrdersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oms/v1/outbound-orders/export")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.OrderNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_number", runtime.ParamLocationQuery, *params.OrderNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PlatformOrderNo != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "platform_order_no", runtime.ParamLocationQuery, *params.PlatformOrderNo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ListingSku != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "listing_sku", runtime.ParamLocationQuery, *params.ListingSku); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sku != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sku", runtime.ParamLocationQuery, *params.Sku); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NssTrackingNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nss_tracking_number", runtime.ParamLocationQuery, *params.NssTrackingNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ShippingName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "shipping_name", runtime.ParamLocationQuery, *params.ShippingName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Platform != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "platform", runtime.ParamLocationQuery, *params.Platform); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StatusLabel != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status_label", runtime.ParamLocationQuery, *params.StatusLabel); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StoreId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "store_id", runtime.ParamLocationQuery, *params.StoreId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WarehouseId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "warehouse_id", runtime.ParamLocationQuery, *params.WarehouseId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CountryCode != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "country_code", runtime.ParamLocationQuery, *params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreatedAtStart != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at_start", runtime.ParamLocationQuery, *params.CreatedAtStart); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreatedAtEnd != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at_end", runtime.ParamLocationQuery, *params.CreatedAtEnd); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ShipDateStart != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ship_date_start", runtime.ParamLocationQuery, *params.ShipDateStart); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ShipDateEnd != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ship_date_end", runtime.ParamLocationQuery, *params.ShipDateEnd); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OfflineOrder != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offline_order", runtime.ParamLocationQuery, *params.OfflineOrder); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrderGetOutboundOrderListFiltersRequest generates requests for OrderGetOutboundOrderListFilters
func NewOrderGetOutboundOrderListFiltersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oms/v1/outbound-orders/filters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrderGetOutboundOrderListRequest generates requests for OrderGetOutboundOrderList
func NewOrderGetOutboundOrderListRequest(server string, params *OrderGetOutboundOrderListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oms/v1/outbound-orders/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.OrderNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_number", runtime.ParamLocationQuery, *params.OrderNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PlatformOrderNo != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "platform_order_no", runtime.ParamLocationQuery, *params.PlatformOrderNo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ListingSku != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "listing_sku", runtime.ParamLocationQuery, *params.ListingSku); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sku != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sku", runtime.ParamLocationQuery, *params.Sku); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NssTrackingNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nss_tracking_number", runtime.ParamLocationQuery, *params.NssTrackingNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ShippingName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "shipping_name", runtime.ParamLocationQuery, *params.ShippingName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Platform != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "platform", runtime.ParamLocationQuery, *params.Platform); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StatusLabel != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status_label", runtime.ParamLocationQuery, *params.StatusLabel); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StoreId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "store_id", runtime.ParamLocationQuery, *params.StoreId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.WarehouseId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "warehouse_id", runtime.ParamLocationQuery, *params.WarehouseId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CountryCode != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "country_code", runtime.ParamLocationQuery, *params.CountryCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreatedAtStart != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at_start", runtime.ParamLocationQuery, *params.CreatedAtStart); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreatedAtEnd != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_at_end", runtime.ParamLocationQuery, *params.CreatedAtEnd); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ShipDateStart != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ship_date_start", runtime.ParamLocationQuery, *params.ShipDateStart); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ShipDateEnd != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ship_date_end", runtime.ParamLocationQuery, *params.ShipDateEnd); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OfflineOrder != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offline_order", runtime.ParamLocationQuery, *params.OfflineOrder); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrderResubmitOutboundOrderRequest calls the generic OrderResubmitOutboundOrder builder with application/json body
func NewOrderResubmitOutboundOrderRequest(server string, body OrderResubmitOutboundOrderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOrderResubmitOutboundOrderRequestWithBody(server, "application/json", bodyReader)
}

// NewOrderResubmitOutboundOrderRequestWithBody generates requests for OrderResubmitOutboundOrder with any type of body
func NewOrderResubmitOutboundOrderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oms/v1/outbound-orders/re-submit")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOrderShippingOutboundOrderRequest calls the generic OrderShippingOutboundOrder builder with application/json body
func NewOrderShippingOutboundOrderRequest(server string, body OrderShippingOutboundOrderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOrderShippingOutboundOrderRequestWithBody(server, "application/json", bodyReader)
}

// NewOrderShippingOutboundOrderRequestWithBody generates requests for OrderShippingOutboundOrder with any type of body
func NewOrderShippingOutboundOrderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oms/v1/outbound-orders/ship")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOrderUploadOutboundOrdersRequestWithBody generates requests for OrderUploadOutboundOrders with any type of body
func NewOrderUploadOutboundOrdersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oms/v1/outbound-orders/upload")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewOrderGetOutboundOrder1Request generates requests for OrderGetOutboundOrder1
func NewOrderGetOutboundOrder1Request(server string, orderNumber string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "order_number", runtime.ParamLocationPath, orderNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oms/v1/outbound-orders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOrderOmsUpdateOutboundOrderRequest calls the generic OrderOmsUpdateOutboundOrder builder with application/json body
func NewOrderOmsUpdateOutboundOrderRequest(server string, orderNumber string, body OrderOmsUpdateOutboundOrderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewOrderOmsUpdateOutboundOrderRequestWithBody(server, orderNumber, "application/json", bodyReader)
}

// NewOrderOmsUpdateOutboundOrderRequestWithBody generates requests for OrderOmsUpdateOutboundOrder with any type of body
func NewOrderOmsUpdateOutboundOrderRequestWithBody(server string, orderNumber string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "order_number", runtime.ParamLocationPath, orderNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oms/v1/outbound-orders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// OrderCreateOutboundOrderItem request with any body
	OrderCreateOutboundOrderItemWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrderCreateOutboundOrderItemResponse, error)

	OrderCreateOutboundOrderItemWithResponse(ctx context.Context, body OrderCreateOutboundOrderItemJSONRequestBody, reqEditors ...RequestEditorFn) (*OrderCreateOutboundOrderItemResponse, error)

	// OrderDeleteOutboundOrderItem request
	OrderDeleteOutboundOrderItemWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*OrderDeleteOutboundOrderItemResponse, error)

	// OrderUpdateOutboundOrderItem request with any body
	OrderUpdateOutboundOrderItemWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrderUpdateOutboundOrderItemResponse, error)

	OrderUpdateOutboundOrderItemWithResponse(ctx context.Context, id int64, body OrderUpdateOutboundOrderItemJSONRequestBody, reqEditors ...RequestEditorFn) (*OrderUpdateOutboundOrderItemResponse, error)

	// OrderDeleteOutboundOrder request with any body
	OrderDeleteOutboundOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrderDeleteOutboundOrderResponse, error)

	OrderDeleteOutboundOrderWithResponse(ctx context.Context, body OrderDeleteOutboundOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*OrderDeleteOutboundOrderResponse, error)

	// OrderBatchQueryOutboundOrder1 request
	OrderBatchQueryOutboundOrder1WithResponse(ctx context.Context, params *OrderBatchQueryOutboundOrder1Params, reqEditors ...RequestEditorFn) (*OrderBatchQueryOutboundOrder1Response, error)

	// OrderCreateOmsOutboundOrder request with any body
	OrderCreateOmsOutboundOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrderCreateOmsOutboundOrderResponse, error)

	OrderCreateOmsOutboundOrderWithResponse(ctx context.Context, body OrderCreateOmsOutboundOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*OrderCreateOmsOutboundOrderResponse, error)

	// OrderBatchOmsUpdateOutboundOrder request with any body
	OrderBatchOmsUpdateOutboundOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrderBatchOmsUpdateOutboundOrderResponse, error)

	OrderBatchOmsUpdateOutboundOrderWithResponse(ctx context.Context, body OrderBatchOmsUpdateOutboundOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*OrderBatchOmsUpdateOutboundOrderResponse, error)

	// OrderBackToReadyOutboundOrder request with any body
	OrderBackToReadyOutboundOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrderBackToReadyOutboundOrderResponse, error)

	OrderBackToReadyOutboundOrderWithResponse(ctx context.Context, body OrderBackToReadyOutboundOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*OrderBackToReadyOutboundOrderResponse, error)

	// OrderCancelOutboundOrder request with any body
	OrderCancelOutboundOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrderCancelOutboundOrderResponse, error)

	OrderCancelOutboundOrderWithResponse(ctx context.Context, body OrderCancelOutboundOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*OrderCancelOutboundOrderResponse, error)

	// OrderGetOutboundOrderCount request
	OrderGetOutboundOrderCountWithResponse(ctx context.Context, params *OrderGetOutboundOrderCountParams, reqEditors ...RequestEditorFn) (*OrderGetOutboundOrderCountResponse, error)

	// OrderExportOutboundOrders request
	OrderExportOutboundOrdersWithResponse(ctx context.Context, params *OrderExportOutboundOrdersParams, reqEditors ...RequestEditorFn) (*OrderExportOutboundOrdersResponse, error)

	// OrderGetOutboundOrderListFilters request
	OrderGetOutboundOrderListFiltersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OrderGetOutboundOrderListFiltersResponse, error)

	// OrderGetOutboundOrderList request
	OrderGetOutboundOrderListWithResponse(ctx context.Context, params *OrderGetOutboundOrderListParams, reqEditors ...RequestEditorFn) (*OrderGetOutboundOrderListResponse, error)

	// OrderResubmitOutboundOrder request with any body
	OrderResubmitOutboundOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrderResubmitOutboundOrderResponse, error)

	OrderResubmitOutboundOrderWithResponse(ctx context.Context, body OrderResubmitOutboundOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*OrderResubmitOutboundOrderResponse, error)

	// OrderShippingOutboundOrder request with any body
	OrderShippingOutboundOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrderShippingOutboundOrderResponse, error)

	OrderShippingOutboundOrderWithResponse(ctx context.Context, body OrderShippingOutboundOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*OrderShippingOutboundOrderResponse, error)

	// OrderUploadOutboundOrders request with any body
	OrderUploadOutboundOrdersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrderUploadOutboundOrdersResponse, error)

	// OrderGetOutboundOrder1 request
	OrderGetOutboundOrder1WithResponse(ctx context.Context, orderNumber string, reqEditors ...RequestEditorFn) (*OrderGetOutboundOrder1Response, error)

	// OrderOmsUpdateOutboundOrder request with any body
	OrderOmsUpdateOutboundOrderWithBodyWithResponse(ctx context.Context, orderNumber string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrderOmsUpdateOutboundOrderResponse, error)

	OrderOmsUpdateOutboundOrderWithResponse(ctx context.Context, orderNumber string, body OrderOmsUpdateOutboundOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*OrderOmsUpdateOutboundOrderResponse, error)
}

type OrderCreateOutboundOrderItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BaseResponse
}

// Status returns HTTPResponse.Status
func (r OrderCreateOutboundOrderItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrderCreateOutboundOrderItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrderDeleteOutboundOrderItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BaseResponse
}

// Status returns HTTPResponse.Status
func (r OrderDeleteOutboundOrderItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrderDeleteOutboundOrderItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrderUpdateOutboundOrderItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BaseResponse
}

// Status returns HTTPResponse.Status
func (r OrderUpdateOutboundOrderItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrderUpdateOutboundOrderItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrderDeleteOutboundOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BatchOrderResponse
}

// Status returns HTTPResponse.Status
func (r OrderDeleteOutboundOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrderDeleteOutboundOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrderBatchQueryOutboundOrder1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrderRsp
}

// Status returns HTTPResponse.Status
func (r OrderBatchQueryOutboundOrder1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrderBatchQueryOutboundOrder1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrderCreateOmsOutboundOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OmsOrderResponse
}

// Status returns HTTPResponse.Status
func (r OrderCreateOmsOutboundOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrderCreateOmsOutboundOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrderBatchOmsUpdateOutboundOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BatchOrderResponse
}

// Status returns HTTPResponse.Status
func (r OrderBatchOmsUpdateOutboundOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrderBatchOmsUpdateOutboundOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrderBackToReadyOutboundOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BatchOrderResponse
}

// Status returns HTTPResponse.Status
func (r OrderBackToReadyOutboundOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrderBackToReadyOutboundOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrderCancelOutboundOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BatchOrderResponse
}

// Status returns HTTPResponse.Status
func (r OrderCancelOutboundOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrderCancelOutboundOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrderGetOutboundOrderCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrderCountResult
}

// Status returns HTTPResponse.Status
func (r OrderGetOutboundOrderCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrderGetOutboundOrderCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrderExportOutboundOrdersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r OrderExportOutboundOrdersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrderExportOutboundOrdersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrderGetOutboundOrderListFiltersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrderListFilters
}

// Status returns HTTPResponse.Status
func (r OrderGetOutboundOrderListFiltersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrderGetOutboundOrderListFiltersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrderGetOutboundOrderListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetOrderListResult
}

// Status returns HTTPResponse.Status
func (r OrderGetOutboundOrderListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrderGetOutboundOrderListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrderResubmitOutboundOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BatchOrderResponse
}

// Status returns HTTPResponse.Status
func (r OrderResubmitOutboundOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrderResubmitOutboundOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrderShippingOutboundOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BatchOrderResponse
}

// Status returns HTTPResponse.Status
func (r OrderShippingOutboundOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrderShippingOutboundOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrderUploadOutboundOrdersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UploadOrdersResult
}

// Status returns HTTPResponse.Status
func (r OrderUploadOutboundOrdersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrderUploadOutboundOrdersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrderGetOutboundOrder1Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *QueryOrderRsp
}

// Status returns HTTPResponse.Status
func (r OrderGetOutboundOrder1Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrderGetOutboundOrder1Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OrderOmsUpdateOutboundOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateResponse
}

// Status returns HTTPResponse.Status
func (r OrderOmsUpdateOutboundOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OrderOmsUpdateOutboundOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// OrderCreateOutboundOrderItemWithBodyWithResponse request with arbitrary body returning *OrderCreateOutboundOrderItemResponse
func (c *ClientWithResponses) OrderCreateOutboundOrderItemWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrderCreateOutboundOrderItemResponse, error) {
	rsp, err := c.OrderCreateOutboundOrderItemWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrderCreateOutboundOrderItemResponse(rsp)
}

func (c *ClientWithResponses) OrderCreateOutboundOrderItemWithResponse(ctx context.Context, body OrderCreateOutboundOrderItemJSONRequestBody, reqEditors ...RequestEditorFn) (*OrderCreateOutboundOrderItemResponse, error) {
	rsp, err := c.OrderCreateOutboundOrderItem(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrderCreateOutboundOrderItemResponse(rsp)
}

// OrderDeleteOutboundOrderItemWithResponse request returning *OrderDeleteOutboundOrderItemResponse
func (c *ClientWithResponses) OrderDeleteOutboundOrderItemWithResponse(ctx context.Context, id int64, reqEditors ...RequestEditorFn) (*OrderDeleteOutboundOrderItemResponse, error) {
	rsp, err := c.OrderDeleteOutboundOrderItem(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrderDeleteOutboundOrderItemResponse(rsp)
}

// OrderUpdateOutboundOrderItemWithBodyWithResponse request with arbitrary body returning *OrderUpdateOutboundOrderItemResponse
func (c *ClientWithResponses) OrderUpdateOutboundOrderItemWithBodyWithResponse(ctx context.Context, id int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrderUpdateOutboundOrderItemResponse, error) {
	rsp, err := c.OrderUpdateOutboundOrderItemWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrderUpdateOutboundOrderItemResponse(rsp)
}

func (c *ClientWithResponses) OrderUpdateOutboundOrderItemWithResponse(ctx context.Context, id int64, body OrderUpdateOutboundOrderItemJSONRequestBody, reqEditors ...RequestEditorFn) (*OrderUpdateOutboundOrderItemResponse, error) {
	rsp, err := c.OrderUpdateOutboundOrderItem(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrderUpdateOutboundOrderItemResponse(rsp)
}

// OrderDeleteOutboundOrderWithBodyWithResponse request with arbitrary body returning *OrderDeleteOutboundOrderResponse
func (c *ClientWithResponses) OrderDeleteOutboundOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrderDeleteOutboundOrderResponse, error) {
	rsp, err := c.OrderDeleteOutboundOrderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrderDeleteOutboundOrderResponse(rsp)
}

func (c *ClientWithResponses) OrderDeleteOutboundOrderWithResponse(ctx context.Context, body OrderDeleteOutboundOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*OrderDeleteOutboundOrderResponse, error) {
	rsp, err := c.OrderDeleteOutboundOrder(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrderDeleteOutboundOrderResponse(rsp)
}

// OrderBatchQueryOutboundOrder1WithResponse request returning *OrderBatchQueryOutboundOrder1Response
func (c *ClientWithResponses) OrderBatchQueryOutboundOrder1WithResponse(ctx context.Context, params *OrderBatchQueryOutboundOrder1Params, reqEditors ...RequestEditorFn) (*OrderBatchQueryOutboundOrder1Response, error) {
	rsp, err := c.OrderBatchQueryOutboundOrder1(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrderBatchQueryOutboundOrder1Response(rsp)
}

// OrderCreateOmsOutboundOrderWithBodyWithResponse request with arbitrary body returning *OrderCreateOmsOutboundOrderResponse
func (c *ClientWithResponses) OrderCreateOmsOutboundOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrderCreateOmsOutboundOrderResponse, error) {
	rsp, err := c.OrderCreateOmsOutboundOrderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrderCreateOmsOutboundOrderResponse(rsp)
}

func (c *ClientWithResponses) OrderCreateOmsOutboundOrderWithResponse(ctx context.Context, body OrderCreateOmsOutboundOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*OrderCreateOmsOutboundOrderResponse, error) {
	rsp, err := c.OrderCreateOmsOutboundOrder(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrderCreateOmsOutboundOrderResponse(rsp)
}

// OrderBatchOmsUpdateOutboundOrderWithBodyWithResponse request with arbitrary body returning *OrderBatchOmsUpdateOutboundOrderResponse
func (c *ClientWithResponses) OrderBatchOmsUpdateOutboundOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrderBatchOmsUpdateOutboundOrderResponse, error) {
	rsp, err := c.OrderBatchOmsUpdateOutboundOrderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrderBatchOmsUpdateOutboundOrderResponse(rsp)
}

func (c *ClientWithResponses) OrderBatchOmsUpdateOutboundOrderWithResponse(ctx context.Context, body OrderBatchOmsUpdateOutboundOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*OrderBatchOmsUpdateOutboundOrderResponse, error) {
	rsp, err := c.OrderBatchOmsUpdateOutboundOrder(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrderBatchOmsUpdateOutboundOrderResponse(rsp)
}

// OrderBackToReadyOutboundOrderWithBodyWithResponse request with arbitrary body returning *OrderBackToReadyOutboundOrderResponse
func (c *ClientWithResponses) OrderBackToReadyOutboundOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrderBackToReadyOutboundOrderResponse, error) {
	rsp, err := c.OrderBackToReadyOutboundOrderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrderBackToReadyOutboundOrderResponse(rsp)
}

func (c *ClientWithResponses) OrderBackToReadyOutboundOrderWithResponse(ctx context.Context, body OrderBackToReadyOutboundOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*OrderBackToReadyOutboundOrderResponse, error) {
	rsp, err := c.OrderBackToReadyOutboundOrder(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrderBackToReadyOutboundOrderResponse(rsp)
}

// OrderCancelOutboundOrderWithBodyWithResponse request with arbitrary body returning *OrderCancelOutboundOrderResponse
func (c *ClientWithResponses) OrderCancelOutboundOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrderCancelOutboundOrderResponse, error) {
	rsp, err := c.OrderCancelOutboundOrderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrderCancelOutboundOrderResponse(rsp)
}

func (c *ClientWithResponses) OrderCancelOutboundOrderWithResponse(ctx context.Context, body OrderCancelOutboundOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*OrderCancelOutboundOrderResponse, error) {
	rsp, err := c.OrderCancelOutboundOrder(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrderCancelOutboundOrderResponse(rsp)
}

// OrderGetOutboundOrderCountWithResponse request returning *OrderGetOutboundOrderCountResponse
func (c *ClientWithResponses) OrderGetOutboundOrderCountWithResponse(ctx context.Context, params *OrderGetOutboundOrderCountParams, reqEditors ...RequestEditorFn) (*OrderGetOutboundOrderCountResponse, error) {
	rsp, err := c.OrderGetOutboundOrderCount(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrderGetOutboundOrderCountResponse(rsp)
}

// OrderExportOutboundOrdersWithResponse request returning *OrderExportOutboundOrdersResponse
func (c *ClientWithResponses) OrderExportOutboundOrdersWithResponse(ctx context.Context, params *OrderExportOutboundOrdersParams, reqEditors ...RequestEditorFn) (*OrderExportOutboundOrdersResponse, error) {
	rsp, err := c.OrderExportOutboundOrders(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrderExportOutboundOrdersResponse(rsp)
}

// OrderGetOutboundOrderListFiltersWithResponse request returning *OrderGetOutboundOrderListFiltersResponse
func (c *ClientWithResponses) OrderGetOutboundOrderListFiltersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*OrderGetOutboundOrderListFiltersResponse, error) {
	rsp, err := c.OrderGetOutboundOrderListFilters(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrderGetOutboundOrderListFiltersResponse(rsp)
}

// OrderGetOutboundOrderListWithResponse request returning *OrderGetOutboundOrderListResponse
func (c *ClientWithResponses) OrderGetOutboundOrderListWithResponse(ctx context.Context, params *OrderGetOutboundOrderListParams, reqEditors ...RequestEditorFn) (*OrderGetOutboundOrderListResponse, error) {
	rsp, err := c.OrderGetOutboundOrderList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrderGetOutboundOrderListResponse(rsp)
}

// OrderResubmitOutboundOrderWithBodyWithResponse request with arbitrary body returning *OrderResubmitOutboundOrderResponse
func (c *ClientWithResponses) OrderResubmitOutboundOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrderResubmitOutboundOrderResponse, error) {
	rsp, err := c.OrderResubmitOutboundOrderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrderResubmitOutboundOrderResponse(rsp)
}

func (c *ClientWithResponses) OrderResubmitOutboundOrderWithResponse(ctx context.Context, body OrderResubmitOutboundOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*OrderResubmitOutboundOrderResponse, error) {
	rsp, err := c.OrderResubmitOutboundOrder(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrderResubmitOutboundOrderResponse(rsp)
}

// OrderShippingOutboundOrderWithBodyWithResponse request with arbitrary body returning *OrderShippingOutboundOrderResponse
func (c *ClientWithResponses) OrderShippingOutboundOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrderShippingOutboundOrderResponse, error) {
	rsp, err := c.OrderShippingOutboundOrderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrderShippingOutboundOrderResponse(rsp)
}

func (c *ClientWithResponses) OrderShippingOutboundOrderWithResponse(ctx context.Context, body OrderShippingOutboundOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*OrderShippingOutboundOrderResponse, error) {
	rsp, err := c.OrderShippingOutboundOrder(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrderShippingOutboundOrderResponse(rsp)
}

// OrderUploadOutboundOrdersWithBodyWithResponse request with arbitrary body returning *OrderUploadOutboundOrdersResponse
func (c *ClientWithResponses) OrderUploadOutboundOrdersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrderUploadOutboundOrdersResponse, error) {
	rsp, err := c.OrderUploadOutboundOrdersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrderUploadOutboundOrdersResponse(rsp)
}

// OrderGetOutboundOrder1WithResponse request returning *OrderGetOutboundOrder1Response
func (c *ClientWithResponses) OrderGetOutboundOrder1WithResponse(ctx context.Context, orderNumber string, reqEditors ...RequestEditorFn) (*OrderGetOutboundOrder1Response, error) {
	rsp, err := c.OrderGetOutboundOrder1(ctx, orderNumber, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrderGetOutboundOrder1Response(rsp)
}

// OrderOmsUpdateOutboundOrderWithBodyWithResponse request with arbitrary body returning *OrderOmsUpdateOutboundOrderResponse
func (c *ClientWithResponses) OrderOmsUpdateOutboundOrderWithBodyWithResponse(ctx context.Context, orderNumber string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*OrderOmsUpdateOutboundOrderResponse, error) {
	rsp, err := c.OrderOmsUpdateOutboundOrderWithBody(ctx, orderNumber, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrderOmsUpdateOutboundOrderResponse(rsp)
}

func (c *ClientWithResponses) OrderOmsUpdateOutboundOrderWithResponse(ctx context.Context, orderNumber string, body OrderOmsUpdateOutboundOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*OrderOmsUpdateOutboundOrderResponse, error) {
	rsp, err := c.OrderOmsUpdateOutboundOrder(ctx, orderNumber, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOrderOmsUpdateOutboundOrderResponse(rsp)
}

// ParseOrderCreateOutboundOrderItemResponse parses an HTTP response from a OrderCreateOutboundOrderItemWithResponse call
func ParseOrderCreateOutboundOrderItemResponse(rsp *http.Response) (*OrderCreateOutboundOrderItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrderCreateOutboundOrderItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BaseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrderDeleteOutboundOrderItemResponse parses an HTTP response from a OrderDeleteOutboundOrderItemWithResponse call
func ParseOrderDeleteOutboundOrderItemResponse(rsp *http.Response) (*OrderDeleteOutboundOrderItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrderDeleteOutboundOrderItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BaseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrderUpdateOutboundOrderItemResponse parses an HTTP response from a OrderUpdateOutboundOrderItemWithResponse call
func ParseOrderUpdateOutboundOrderItemResponse(rsp *http.Response) (*OrderUpdateOutboundOrderItemResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrderUpdateOutboundOrderItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BaseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrderDeleteOutboundOrderResponse parses an HTTP response from a OrderDeleteOutboundOrderWithResponse call
func ParseOrderDeleteOutboundOrderResponse(rsp *http.Response) (*OrderDeleteOutboundOrderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrderDeleteOutboundOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BatchOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrderBatchQueryOutboundOrder1Response parses an HTTP response from a OrderBatchQueryOutboundOrder1WithResponse call
func ParseOrderBatchQueryOutboundOrder1Response(rsp *http.Response) (*OrderBatchQueryOutboundOrder1Response, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrderBatchQueryOutboundOrder1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrderRsp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrderCreateOmsOutboundOrderResponse parses an HTTP response from a OrderCreateOmsOutboundOrderWithResponse call
func ParseOrderCreateOmsOutboundOrderResponse(rsp *http.Response) (*OrderCreateOmsOutboundOrderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrderCreateOmsOutboundOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OmsOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrderBatchOmsUpdateOutboundOrderResponse parses an HTTP response from a OrderBatchOmsUpdateOutboundOrderWithResponse call
func ParseOrderBatchOmsUpdateOutboundOrderResponse(rsp *http.Response) (*OrderBatchOmsUpdateOutboundOrderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrderBatchOmsUpdateOutboundOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BatchOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrderBackToReadyOutboundOrderResponse parses an HTTP response from a OrderBackToReadyOutboundOrderWithResponse call
func ParseOrderBackToReadyOutboundOrderResponse(rsp *http.Response) (*OrderBackToReadyOutboundOrderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrderBackToReadyOutboundOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BatchOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrderCancelOutboundOrderResponse parses an HTTP response from a OrderCancelOutboundOrderWithResponse call
func ParseOrderCancelOutboundOrderResponse(rsp *http.Response) (*OrderCancelOutboundOrderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrderCancelOutboundOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BatchOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrderGetOutboundOrderCountResponse parses an HTTP response from a OrderGetOutboundOrderCountWithResponse call
func ParseOrderGetOutboundOrderCountResponse(rsp *http.Response) (*OrderGetOutboundOrderCountResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrderGetOutboundOrderCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrderCountResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrderExportOutboundOrdersResponse parses an HTTP response from a OrderExportOutboundOrdersWithResponse call
func ParseOrderExportOutboundOrdersResponse(rsp *http.Response) (*OrderExportOutboundOrdersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrderExportOutboundOrdersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseOrderGetOutboundOrderListFiltersResponse parses an HTTP response from a OrderGetOutboundOrderListFiltersWithResponse call
func ParseOrderGetOutboundOrderListFiltersResponse(rsp *http.Response) (*OrderGetOutboundOrderListFiltersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrderGetOutboundOrderListFiltersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrderListFilters
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrderGetOutboundOrderListResponse parses an HTTP response from a OrderGetOutboundOrderListWithResponse call
func ParseOrderGetOutboundOrderListResponse(rsp *http.Response) (*OrderGetOutboundOrderListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrderGetOutboundOrderListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetOrderListResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrderResubmitOutboundOrderResponse parses an HTTP response from a OrderResubmitOutboundOrderWithResponse call
func ParseOrderResubmitOutboundOrderResponse(rsp *http.Response) (*OrderResubmitOutboundOrderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrderResubmitOutboundOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BatchOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrderShippingOutboundOrderResponse parses an HTTP response from a OrderShippingOutboundOrderWithResponse call
func ParseOrderShippingOutboundOrderResponse(rsp *http.Response) (*OrderShippingOutboundOrderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrderShippingOutboundOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BatchOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrderUploadOutboundOrdersResponse parses an HTTP response from a OrderUploadOutboundOrdersWithResponse call
func ParseOrderUploadOutboundOrdersResponse(rsp *http.Response) (*OrderUploadOutboundOrdersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrderUploadOutboundOrdersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UploadOrdersResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrderGetOutboundOrder1Response parses an HTTP response from a OrderGetOutboundOrder1WithResponse call
func ParseOrderGetOutboundOrder1Response(rsp *http.Response) (*OrderGetOutboundOrder1Response, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrderGetOutboundOrder1Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest QueryOrderRsp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseOrderOmsUpdateOutboundOrderResponse parses an HTTP response from a OrderOmsUpdateOutboundOrderWithResponse call
func ParseOrderOmsUpdateOutboundOrderResponse(rsp *http.Response) (*OrderOmsUpdateOutboundOrderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OrderOmsUpdateOutboundOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
